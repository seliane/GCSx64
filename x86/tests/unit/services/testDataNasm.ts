/* SPDX-License-Identifier: GPL-2.0-only */
/*
 * GCSx64 - x86_64 Graphical CPU Simulator
 *
 * Copyright Â© 2021 by Eliane Schmidli <seliane.github@gmail.com> and Yves Boillat <yvbo@protonmail.com>
 *
 * This file is part of GCSx64 - x86_64 Graphical CPU Simulator
 *
 * GCSx64 is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, version 2 of the License only.
 *
 * GCSx64 is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with GCSx64.  If not, see <https://www.gnu.org/licenses/>.
 */

function hexStringToUint8Array(hexString: string): Uint8Array {
  const cleanedHexString = hexString.split(' ').join('').split('\n').join('');
  /* eslint-disable */
  // @ts-ignore
  return Uint8Array.from(Buffer.from(cleanedHexString, 'hex'));
  /* eslint-enable */
}

export const assemblyCode0 = 'BITS 64\n'
  + '\n'
  + 'SECTION .data\n'
  + 'firstVar:\n'
  + '  dq 0x1337\n'
  + 'otherVar:\n'
  + '  dq 0xcafe\n'
  + '\n'
  + 'SECTION .text\n'
  + 'global _start\n'
  + '_start:\n'
  + '  mov rax, [firstVar]\n'
  + '  mov rbx, [otherVar]\n'
  + '  mov [firstVar], rbx\n'
  + '  mov [otherVar], rax';

export const machineCode0 = hexStringToUint8Array(
  '488b 0425 2000 0000 488b 1c25 2800 0000\n'
  + '4889 1c25 2000 0000 4889 0425 2800 0000\n'
  + '3713 0000 0000 0000 feca 0000 0000 0000\n',
);

export const disassembledCode0 = '00000000  488B042520000000  mov rax,[0x20]\n'
  + '00000008  488B1C2528000000  mov rbx,[0x28]\n'
  + '00000010  48891C2520000000  mov [0x20],rbx\n'
  + '00000018  4889042528000000  mov [0x28],rax\n'
  + '00000020  37                db 0x37\n'
  + '00000021  1300              adc eax,[rax]\n'
  + '00000023  0000              add [rax],al\n'
  + '00000025  0000              add [rax],al\n'
  + '00000027  00FE              add dh,bh\n'
  + '00000029  CA0000            retf 0x0\n'
  + '0000002C  0000              add [rax],al\n'
  + '0000002E  0000              add [rax],al\n';

export const assemblyCode1 = 'BITS 64\n'
  + '\n'
  + '\tsection\t.data\n'
  + '\tglobal\tmain\n'
  + '\n'
  + '\tsection\t.data\n'
  + 'fmta:\tdb\t"a  %ld",10,0\n'
  + 'fmtaa:\tdb\t"aa %ld",10,0\n'
  + 'fmtflt:\tdb\t"af %e",10,0\n'
  + '\n'
  + '\tsection\t.text\n'
  + 'main:\tpush\trbp\t\t; set up stack\n'
  + '\n'
  + '; evaluate an integer polynomial, X=7, using a count\n'
  + '\n'
  + '\tsection\t.data\n'
  + 'a:\tdq\t2,5,-7,22,-9\t; coefficients of polynomial, a_n first\n'
  + 'X:\tdq\t7\t\t; X = 7\n'
  + '\t\t\t\t; n=4, 8 bytes per coefficient\n'
  + '\tsection\t.text\n'
  + '\tmov\trax,[a]\t\t; accumulate value here, get coefficient a_n\n'
  + '\tmov\trdi,1\t\t; subscript initialization\n'
  + '\tmov\trcx,4\t\t; loop iteration count initialization, n\n'
  + 'h3loop:\timul\trax,[X]\t\t; * X     (ignore edx)\n'
  + '\tadd\trax,[a+8*rdi]\t; + a_n-i\n'
  + '\tinc\trdi\t\t; increment subscript\n'
  + '\tloop\th3loop\t\t; decrement rcx, jump on non zero\n'
  + '\n'
  + '\tmov\trsi, rax\t; print rax\n'
  + '\tmov\trdi, fmta\t; format\n'
  + '\tmov\trax, 0\t\t; no float\n'
  + '\n'
  + '\n'
  + '; evaluate an integer polynomial, X=7, using a count as index\n'
  + '; optimal organization of data allows a three instruction loop\n'
  + '\t\n'
  + '\tsection\t.data\n'
  + 'aa:\tdq\t-9,22,-7,5,2\t; coefficients of polynomial, a_0 first\n'
  + 'n:\tdq\t4\t\t; n=4, 8 bytes per coefficient\n'
  + '\tsection\t.text\n'
  + '\tmov\trax,[aa+4*8]\t; accumulate value here, get coefficient a_n\n'
  + '\tmov\trcx,[n]\t\t; loop iteration count initialization, n\n'
  + 'h4loop:\timul\trax,[X]\t\t; * X     (ignore edx)\n'
  + '\tadd\trax,[aa+8*rcx-8]; + aa_n-i\n'
  + '\tloop\th4loop\t\t; decrement rcx, jump on non zero\n'
  + '\n'
  + '\tmov\trsi, rax\t; print rax\n'
  + '\tmov\trdi, fmtaa\t; format\n'
  + '\tmov\trax, 0\t\t; no float\n'
  + '\n'
  + '; evaluate a double floating polynomial, X=7.0, using a count as index\n'
  + '; optimal organization of data allows a three instruction loop\n'
  + '\t\n'
  + '\tsection\t.data\n'
  + 'af:\tdq\t-9.0,22.0,-7.0,5.0,2.0\t; coefficients of polynomial, a_0 first\n'
  + 'XF:\tdq\t7.0\n'
  + 'Y:\tdq\t0.0\n'
  + 'N:\tdd\t4\n'
  + '\n'
  + '\tsection\t.text\n'
  + '\tmov\trcx,[N]\t\t; loop iteration count initialization, n\n'
  + '\tfld\tqword [af+8*rcx]; accumulate value here, get coefficient a_n\n'
  + 'h5loop:\tfmul\tqword [XF]\t; * XF\n'
  + '\tfadd\tqword [af+8*rcx-8] ; + aa_n-i\n'
  + '\tloop\th5loop\t\t; decrement rcx, jump on non zero\n'
  + '\n'
  + '\tfstp\tqword [Y]\t; store Y in order to print Y\n'
  + '\tmovq\txmm0, qword [Y]\t; well, may just mov reg\n'
  + '\tmov\trdi, fmtflt\t; format\n'
  + '\tmov\trax, 1\t\t; one float\n'
  + '\n'
  + '\tpop\trbp\t\t; restore stack\n'
  + '\tmov\trax,0\t\t; normal return\n'
  + '\tret\t\t\t; return\n';

export const machineCode1 = hexStringToUint8Array(
  '5548 8b04 25cf 0000 00bf 0100 0000 b904\n'
  + '0000 0048 0faf 0425 f700 0000 4803 04fd\n'
  + 'cf00 0000 48ff c7e2 ea48 89c6 48bf b800\n'
  + '0000 0000 0000 b800 0000 0048 8b04 251f\n'
  + '0100 0048 8b0c 2527 0100 0048 0faf 0425\n'
  + 'f700 0000 4803 04cd f700 0000 e2ed 4889\n'
  + 'c648 bfc0 0000 0000 0000 00b8 0000 0000\n'
  + '488b 0c25 6701 0000 dd04 cd2f 0100 00dc\n'
  + '0c25 5701 0000 dc04 cd27 0100 00e2 f0dd\n'
  + '1c25 5f01 0000 f30f 7e04 255f 0100 0048\n'
  + 'bfc8 0000 0000 0000 00b8 0100 0000 5db8\n'
  + '0000 0000 c300 0000 6120 2025 6c64 0a00\n'
  + '6161 2025 6c64 0a00 6166 2025 650a 0002\n'
  + '0000 0000 0000 0005 0000 0000 0000 00f9\n'
  + 'ffff ffff ffff ff16 0000 0000 0000 00f7\n'
  + 'ffff ffff ffff ff07 0000 0000 0000 00f7\n'
  + 'ffff ffff ffff ff16 0000 0000 0000 00f9\n'
  + 'ffff ffff ffff ff05 0000 0000 0000 0002\n'
  + '0000 0000 0000 0004 0000 0000 0000 0000\n'
  + '0000 0000 0022 c000 0000 0000 0036 4000\n'
  + '0000 0000 001c c000 0000 0000 0014 4000\n'
  + '0000 0000 0000 4000 0000 0000 001c 4000\n'
  + '0000 0000 0000 0004 0000 00',
);

export const disassembledCode1 = '00000000  55                push rbp\n'
  + '00000001  488B0425CF000000  mov rax,[0xcf]\n'
  + '00000009  BF01000000        mov edi,0x1\n'
  + '0000000E  B904000000        mov ecx,0x4\n'
  + '00000013  480FAF0425F70000  imul rax,[0xf7]\n'
  + '         -00\n'
  + '0000001C  480304FDCF000000  add rax,[rdi*8+0xcf]\n'
  + '00000024  48FFC7            inc rdi\n'
  + '00000027  E2EA              loop 0x13\n'
  + '00000029  4889C6            mov rsi,rax\n'
  + '0000002C  48BFB80000000000  mov rdi,0xb8\n'
  + '         -0000\n'
  + '00000036  B800000000        mov eax,0x0\n'
  + '0000003B  488B04251F010000  mov rax,[0x11f]\n'
  + '00000043  488B0C2527010000  mov rcx,[0x127]\n'
  + '0000004B  480FAF0425F70000  imul rax,[0xf7]\n'
  + '         -00\n'
  + '00000054  480304CDF7000000  add rax,[rcx*8+0xf7]\n'
  + '0000005C  E2ED              loop 0x4b\n'
  + '0000005E  4889C6            mov rsi,rax\n'
  + '00000061  48BFC00000000000  mov rdi,0xc0\n'
  + '         -0000\n'
  + '0000006B  B800000000        mov eax,0x0\n'
  + '00000070  488B0C2567010000  mov rcx,[0x167]\n'
  + '00000078  DD04CD2F010000    fld qword [rcx*8+0x12f]\n'
  + '0000007F  DC0C2557010000    fmul qword [0x157]\n'
  + '00000086  DC04CD27010000    fadd qword [rcx*8+0x127]\n'
  + '0000008D  E2F0              loop 0x7f\n'
  + '0000008F  DD1C255F010000    fstp qword [0x15f]\n'
  + '00000096  F30F7E04255F0100  movq xmm0,[0x15f]\n'
  + '         -00\n'
  + '0000009F  48BFC80000000000  mov rdi,0xc8\n'
  + '         -0000\n'
  + '000000A9  B801000000        mov eax,0x1\n'
  + '000000AE  5D                pop rbp\n'
  + '000000AF  B800000000        mov eax,0x0\n'
  + '000000B4  C3                ret\n'
  + '000000B5  0000              add [rax],al\n'
  + '000000B7  006120            add [rcx+0x20],ah\n'
  + '000000BA  20256C640A00      and [rel 0xa652c],ah\n'
  + '000000C0  61                db 0x61\n'
  + '000000C1  61                db 0x61\n'
  + '000000C2  20256C640A00      and [rel 0xa6534],ah\n'
  + '000000C8  61                db 0x61\n'
  + '000000C9  662025650A0002    o16 and [rel 0x2000b35],ah\n'
  + '000000D0  0000              add [rax],al\n'
  + '000000D2  0000              add [rax],al\n'
  + '000000D4  0000              add [rax],al\n'
  + '000000D6  000500000000      add [rel 0xdc],al\n'
  + '000000DC  0000              add [rax],al\n'
  + '000000DE  00F9              add cl,bh\n'
  + '000000E0  FF                db 0xff\n'
  + '000000E1  FF                db 0xff\n'
  + '000000E2  FF                db 0xff\n'
  + '000000E3  FF                db 0xff\n'
  + '000000E4  FF                db 0xff\n'
  + '000000E5  FF                db 0xff\n'
  + '000000E6  FF16              call [rsi]\n'
  + '000000E8  0000              add [rax],al\n'
  + '000000EA  0000              add [rax],al\n'
  + '000000EC  0000              add [rax],al\n'
  + '000000EE  00F7              add bh,dh\n'
  + '000000F0  FF                db 0xff\n'
  + '000000F1  FF                db 0xff\n'
  + '000000F2  FF                db 0xff\n'
  + '000000F3  FF                db 0xff\n'
  + '000000F4  FF                db 0xff\n'
  + '000000F5  FF                db 0xff\n'
  + '000000F6  FF07              inc dword [rdi]\n'
  + '000000F8  0000              add [rax],al\n'
  + '000000FA  0000              add [rax],al\n'
  + '000000FC  0000              add [rax],al\n'
  + '000000FE  00F7              add bh,dh\n'
  + '00000100  FF                db 0xff\n'
  + '00000101  FF                db 0xff\n'
  + '00000102  FF                db 0xff\n'
  + '00000103  FF                db 0xff\n'
  + '00000104  FF                db 0xff\n'
  + '00000105  FF                db 0xff\n'
  + '00000106  FF16              call [rsi]\n'
  + '00000108  0000              add [rax],al\n'
  + '0000010A  0000              add [rax],al\n'
  + '0000010C  0000              add [rax],al\n'
  + '0000010E  00F9              add cl,bh\n'
  + '00000110  FF                db 0xff\n'
  + '00000111  FF                db 0xff\n'
  + '00000112  FF                db 0xff\n'
  + '00000113  FF                db 0xff\n'
  + '00000114  FF                db 0xff\n'
  + '00000115  FF                db 0xff\n'
  + '00000116  FF0500000000      inc dword [rel 0x11c]\n'
  + '0000011C  0000              add [rax],al\n'
  + '0000011E  0002              add [rdx],al\n'
  + '00000120  0000              add [rax],al\n'
  + '00000122  0000              add [rax],al\n'
  + '00000124  0000              add [rax],al\n'
  + '00000126  000400            add [rax+rax],al\n'
  + '00000129  0000              add [rax],al\n'
  + '0000012B  0000              add [rax],al\n'
  + '0000012D  0000              add [rax],al\n'
  + '0000012F  0000              add [rax],al\n'
  + '00000131  0000              add [rax],al\n'
  + '00000133  0000              add [rax],al\n'
  + '00000135  22C0              and al,al\n'
  + '00000137  0000              add [rax],al\n'
  + '00000139  0000              add [rax],al\n'
  + '0000013B  0000              add [rax],al\n'
  + '0000013D  36400000          add [ss:rax],al\n'
  + '00000141  0000              add [rax],al\n'
  + '00000143  0000              add [rax],al\n'
  + '00000145  1CC0              sbb al,0xc0\n'
  + '00000147  0000              add [rax],al\n'
  + '00000149  0000              add [rax],al\n'
  + '0000014B  0000              add [rax],al\n'
  + '0000014D  1440              adc al,0x40\n'
  + '0000014F  0000              add [rax],al\n'
  + '00000151  0000              add [rax],al\n'
  + '00000153  0000              add [rax],al\n'
  + '00000155  004000            add [rax+0x0],al\n'
  + '00000158  0000              add [rax],al\n'
  + '0000015A  0000              add [rax],al\n'
  + '0000015C  001C40            add [rax+rax*2],bl\n'
  + '0000015F  0000              add [rax],al\n'
  + '00000161  0000              add [rax],al\n'
  + '00000163  0000              add [rax],al\n'
  + '00000165  0000              add [rax],al\n'
  + '00000167  0400              add al,0x0\n'
  + '00000169  0000              add [rax],al\n';
